/**
 * @module src/index
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var findIndex = require('101/find-index');
var isFunction = require('101/is-function');

var ArraySubtract = function () {
  /**
   * Accepts a function as a comparator
   * @constructor
   * @throws
   * @param {Function} comparator
   */

  function ArraySubtract(comparator) {
    _classCallCheck(this, ArraySubtract);

    if (!isFunction(comparator)) {
      throw new Error('argument must be a function');
    }
    this.comparator = comparator;
  }

  /**
   * Returns a new array that contains a unique set of all the values in `a` that do not have
   * corresponding values in b
   *
   * @throws
   * @param {Array<*>} a
   * @param {Array<*>} b
   * @return Array<*>
   */

  _createClass(ArraySubtract, [{
    key: 'sub',
    value: function sub(a, b) {
      var _this = this;

      if (!Array.isArray(a) || !Array.isArray(b)) {
        throw new Error('invalid arguments, arguments to ArraySubtract.prototype.sub must be Arrays');
      }
      var resultArray = [];

      var _loop = function _loop(i, lenA) {
        var aVal = a[i];
        var bFindIndex = findIndex(b, function (val) {
          return _this.comparator(aVal, val);
        });
        if (! ~bFindIndex) {
          // aVal does not exist in b
          resultArray.push(aVal);
        }
      };

      for (var i = 0, lenA = a.length; i < lenA; i++) {
        _loop(i, lenA);
      }
      return resultArray;
    }
  }]);

  return ArraySubtract;
}();

module.exports = ArraySubtract;